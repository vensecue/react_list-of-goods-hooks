{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","visibleGoods","setVisibleGoods","handleSort","newSort","useEffect","sort","reversed","goodsCopy","ALPHABET","a","b","localeCompare","LENGTH","length","reverse","reorderGoods","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,kDAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAME,IAAME,EAAgB,WAC3B,MAAgCC,mBAAmBH,EAASI,MAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAkB,GAAtD,mBAAOI,EAAP,KAAmBC,EAAnB,KACA,EAAwCL,mBAAmBF,GAA3D,mBAAOQ,EAAP,KAAqBC,EAArB,KAMMC,EAAa,SAACC,GAAD,OAAuBN,EAAYM,IA2BtD,OAJAC,qBAAU,YAhBW,SAACC,EAAgBC,GACpC,IAAMC,EAAS,UAAOf,GAElBa,IAASd,EAASiB,SACpBD,EAAUF,MAAK,SAACI,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAChCL,IAASd,EAASqB,QAC3BL,EAAUF,MAAK,SAACI,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UAGpCP,GACFC,EAAUO,UAGZb,EAAgBM,GAIhBQ,CAAanB,EAAUE,KACtB,CAACF,EAAUE,IAGZ,sBAAKkB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,yBACPpB,IAAaL,EAASiB,SAAW,GAAK,YAExCU,QAAS,kBAAMhB,EAAWX,EAASiB,WALrC,iCAUA,wBACES,KAAK,SACLD,UAAS,4BACPpB,IAAaL,EAASqB,OAAS,GAAK,YAEtCM,QAAS,kBAAMhB,EAAWX,EAASqB,SALrC,4BAUA,wBACEK,KAAK,SACLD,UAAS,6BAAwBlB,EAAa,GAAK,YACnDoB,QAzDc,WACpBnB,GAAeD,IAqDX,sBAQEF,IAAaL,EAASI,MAAQG,IAC9B,wBACEmB,KAAK,SACLD,UAAU,4BACVE,QA5DU,WAClBrB,EAAYN,EAASI,MACrBI,GAAc,IAuDR,sBAUJ,6BACGC,EAAamB,KAAI,SAACC,GAAD,OAChB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YCpGnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8d9d62dd.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n  const [isReversed, setIsReversed] = useState<boolean>(false);\n  const [visibleGoods, setVisibleGoods] = useState<string[]>(goodsFromServer);\n\n  const handleReverse = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const handleSort = (newSort: SortType) => setSortType(newSort);\n\n  const handleReset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  const reorderGoods = (sort: SortType, reversed: boolean) => {\n    const goodsCopy = [...goodsFromServer];\n\n    if (sort === SortType.ALPHABET) {\n      goodsCopy.sort((a, b) => a.localeCompare(b));\n    } else if (sort === SortType.LENGTH) {\n      goodsCopy.sort((a, b) => a.length - b.length);\n    }\n\n    if (reversed) {\n      goodsCopy.reverse();\n    }\n\n    setVisibleGoods(goodsCopy);\n  };\n\n  useEffect(() => {\n    reorderGoods(sortType, isReversed);\n  }, [sortType, isReversed]);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${\n            sortType === SortType.ALPHABET ? '' : 'is-light'\n          }`}\n          onClick={() => handleSort(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${\n            sortType === SortType.LENGTH ? '' : 'is-light'\n          }`}\n          onClick={() => handleSort(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning  ${isReversed ? '' : 'is-light'}`}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}